name: Meson CI

on:
  push:
    paths:
      - "**.c"
      - "**.h"
      - "**.py"
      - "**.build"
      - "**.options"
  pull_request:
    paths:
      - "**.c"
      - "**.h"
      - "**.py"
      - "**.build"
      - "**.options"

jobs:
  build_basic:
    name: Running a basic test run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Meson and Ninja
        run: |
          python -m pip install meson ninja

      - name: Configure
        run: meson setup builddir --fatal-meson-warnings -Dwerror=true -Dwith_test=enabled

      - name: Compile
        run: meson compile -C builddir

      - name: Run Tests
        run: meson test -C builddir -v --test-args='--mode devops'

      - name: Upload Test Log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: basic_meson_testlog
          path: builddir/meson-logs/testlog.txt

      - name: Create Distribution Package
        if: success()
        run: meson dist -C builddir

      - name: Archive Distribution Package
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ runner.os }}-${{ matrix.meson_version }}
          path: builddir/meson-dist/*.tar.*

  build_hosts:
    # if: github.event.pull_request.head.repo.full_name == 'fossil-lib/${{ github.event.repository.name }}'
    name: Running on ${{ matrix.os }} with Meson v${{ matrix.meson_version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04, ubuntu-22.04, ubuntu-24.04, macos-latest, macos-13, macos-14, windows-2022]
        meson_version: ["1.2.0", "1.3.0", "1.4.0"] # ensure no issues between Meson versions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Meson and Ninja
        run: |
          python -m pip install meson==${{ matrix.meson_version }} ninja

      - name: Configure
        run: meson setup builddir --fatal-meson-warnings -Dwerror=true -Dwith_test=enabled

      - name: Compile
        run: meson compile -C builddir

      - name: Run Tests
        run: meson test -C builddir -v --test-args='--mode devops'

      - name: Upload Test Log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}_meson_testlog
          path: builddir/meson-logs/testlog.txt

      - name: Create Distribution Package
        if: success()
        run: meson dist -C builddir

      - name: Archive Distribution Package
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ runner.os }}-${{ matrix.meson_version }}
          path: builddir/meson-dist/*.tar.*

  build_msvc:
    # if: github.event.pull_request.head.repo.full_name == 'fossil-lib/${{ github.event.repository.name }}'
    name: Running on Windows with MSVC
    runs-on: windows-latest
    strategy:
      matrix:
        msvc_version: [2015, 2017, 2019, 2022]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Meson and Ninja
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          python -m pip install meson ninja
          if ($env:msvc_version -eq "2015") {
            choco install visualstudio2015buildtools --package-parameters "--add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --includeRecommended --includeOptional --passive"
          } elseif ($env:msvc_version -eq "2017") {
            choco install visualstudio2017buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --includeOptional --passive"
          } elseif ($env:msvc_version -eq "2019") {
            choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --includeOptional --passive"
          } elseif ($env:msvc_version -eq "2022") {
            choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --includeOptional --passive"
          }
          $env:CC="cl.exe"
          $env:CXX="cl.exe"

      - name: Configure
        run: meson setup builddir_msvc_${{ matrix.msvc_version }} --fatal-meson-warnings -Dwerror=true -Dwith_test=enabled -Dc_args='/sdl /analyze' -Dcpp_args='/sdl /analyze'

      - name: Compile
        run: meson compile -C builddir_msvc_${{ matrix.msvc_version }}

      - name: Run Tests
        run: meson test -C builddir_msvc_${{ matrix.msvc_version }} -v --test-args='--mode devops'

      - name: Upload Test Log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: windows_msvc_${{ matrix.msvc_version }}_meson_testlog
          path: builddir_msvc_${{ matrix.msvc_version }}/meson-logs/testlog.txt

      - name: Create Distribution Package
        if: success()
        run: meson dist -C builddir_msvc_${{ matrix.msvc_version }}

      - name: Archive Distribution Package
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: fossil-lib/${{ github.event.repository.name }}-windows-${{ matrix.msvc_version }}
          path: builddir_msvc_${{ matrix.msvc_version }}/meson-dist/*.tar.*
